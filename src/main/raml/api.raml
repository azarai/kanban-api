#%RAML 1.0
---
resourceTypes:
  collection:
      get:
        responses:          
          400:
            description: |
              The request sent to the server contains data which is not as expected e.g. incorrect drink type
          404:
            description: |
              The requested resource was not found
  collection-item:
      get:
        responses:          
          400:
            description: |
              The request sent to the server contains data which is not as expected e.g. incorrect drink type
          404:
            description: |
              The requested resource was not found                        
      put:
        responses:          
          404:
            description: |
              The requested resource on which the modification is being attempted was not found              
      delete:
        responses:          
          404:
            description: | 
              The requested resource to delete was not found 

title: Kanban API
baseUri: http://kanban.codeboje.de/{version}
version: v1
description: Basic version of the Kanban API
  Resources are filtered by logged in user

mediaType: application/json

types:
  Task:
     properties:
      id:
          description: "unique ID of a task"
          type: "integer"
      boardId:
          description: "unique ID of a kanban board the task belongs to"
          type: "integer"         
      content:
          description: "The actual task content aka description"
          type: "string"
      category:
          description: "category of the task"
          type: "string"
      lane:
          description: "The lane the task belongs to"
          enum: [ ready, doing, done ]
  Board:
     properties: 
       id:
        description: "unique id of a kanban board"
        type: "integer"
       name:
        description: "name of the board"
        type: "string"
       user:
        description: "user id of the owner"
        type: "string"

/boards:
  type: collection
  get:
    description: retrieve all boards of the logged in user
    responses:
      200:
        body:
          application/json:
            type: Board[]  
            example: | 
              [
               {
                 "id": 9781111,
                 "name": "Life",
                 "user": "harry"
               }
              ]
  post:
    description: create a new board
    body: 
      application/json:
        type: Board
        example: |
               {
                 "id": -1,
                 "name": "Life",
                 "user": "harry"
               }
    responses: 
      201:
        body: 
          application/json:
            type: Board
            example: |
               {
                 "id": 9781111,
                 "name": "Life",
                 "user": "harry"
               }
/tasks/{BoardId}:
  type: collection
  uriParameters: 
    BoardId:
      type: integer
      description: The unique id of a board
  get:
    description: Retrieves all **tasks**
    responses:
      200:
        body:
          application/json:
            type: Task[]  
            example: | 
              [
               {
                 "id": 9781111,
                 "boardId": 4711,
                 "content": "How to ...",
                 "category": "cat1.",
                 "lane": "ready"
               }
              ]
  post:
    description: create a new task
    body: 
      application/json:
        type: Task
        example: |
          {
             "id": -1,
             "boardId": 4711,
             "content": "How to ...",
             "category": "cat1.",
             "lane": "ready"
          }
    responses: 
      201:
        body: 
          application/json:
            type: Task
            example: |
              {
                 "id": 9781111,
                 "boardId": 4711,
                 "content": "How to ...",
                 "category": "cat1.",
                 "lane": "ready"
              }
/task/{TaskId}:
  type: collection-item
  uriParameters: 
    TaskId:
      type: integer
      description: The unique id of a task
  get:
    description: retrieve a single task
    responses: 
      200:
        body: 
          application/json:
            type: Task
            example: |
              {
                 "id": 9781111,
                 "boardId": 4711,
                 "content": "How to ...",
                 "category": "cat1.",
                 "lane": "ready"
              }
  delete:
    description: delete a single task
    responses: 
      200:
        body: 
          application/json:
            type: boolean
  put:
    description: change a single task
    body: 
      application/json:
        type: Task
        example: |
          {
             "id": -1,
             "boardId": 4711,
             "content": "How to ...",
             "category": "cat1.",
             "lane": "ready"
          }
    responses: 
      200:
        body: 
          application/json:
            type: Task
            example: |
              {
                 "id": 9781111,
                 "boardId": 4711,
                 "content": "How to ...",
                 "category": "cat1.",
                 "lane": "ready"
              }